variables:
    IMAGE_TAG: 1.0.0-edge
    APP_NAME: uaa-wallet
    KUBECONFIG: /etc/deploy/config
    TESTING_IMAGE: ${CI_REGISTRY_IMAGE}/testing
    STAGING_IMAGE: apuscorp/uaa-wallet-afs:dev-${CI_PIPELINE_IID}-${CI_COMMIT_SHA}
    PROD_IMAGE: apuscorp/uaa-wallet-afs:prod-${CI_PIPELINE_IID}-${CI_COMMIT_SHA}
    STAGING_IMAGE_LTS: apuscorp/uaa-wallet-afs:dev-latest
    PROD_IMAGE_LTS: apuscorp/uaa-wallet-afs:prod-latest
    DOCKER_DRIVER: overlay
    DOCKER_TLS_CERTDIR: ''

before_script:
    - uname -a
    - hostname
    - whoami

stages:
    - build_and_test
    - docker_build
    - deploy

services:
    - name: quay.io/shakeys/docker:dind
      command: ['--experimental']

job_docker_build:
    image: docker:stable
    tags:
        - gitlab
    stage: docker_build
    before_script:
        - docker info
        - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" ${CI_REGISTRY}
    script:
        - release_date=$(TZ=UTC-8 date "+%Y-%m-%d %H:%M")
        - docker pull ${STAGING_IMAGE_LTS} || true
        - docker pull ${PROD_IMAGE_LTS} || true
        - if [ ${CI_COMMIT_REF_NAME} = "master" ] ; then  echo "$env_prod" > .env || true ; else echo "$env_dev" > .env || true ; fi
        - if [ ${CI_COMMIT_REF_NAME} = "develop" ] ; then docker build --build-arg build_env=dev --build-arg release_date='${release_date}' --build-arg GITLAB_URL=${GITLAB_URL} --build-arg GITLAB_LOGIN=${GITLAB_LOGIN} --build-arg GITLAB_TOKEN=${GITLAB_TOKEN} --cache-from ${STAGING_IMAGE_LTS} -t ${STAGING_IMAGE} . ; elif [ ${CI_COMMIT_REF_NAME} = "staging" ] ; then docker build --pull --build-arg build_env=stag --build-arg release_date='${release_date}' --build-arg GITLAB_URL=${GITLAB_URL} --build-arg GITLAB_LOGIN=${GITLAB_LOGIN} --build-arg GITLAB_TOKEN=${GITLAB_TOKEN} --cache-from ${STAGING_IMAGE_LTS} -t ${STAGING_IMAGE} . ; else docker build --build-arg build_env= prod --build-arg release_date='${release_date}' --build-arg GITLAB_URL=${GITLAB_URL} --build-arg GITLAB_LOGIN=${GITLAB_LOGIN} --build-arg GITLAB_TOKEN=${GITLAB_TOKEN} --cache-from ${PROD_IMAGE_LTS} -t ${PROD_IMAGE} . ; fi
        - if [ ${CI_COMMIT_REF_NAME} = "develop" ] || [ ${CI_COMMIT_REF_NAME} = "staging" ] ; then docker tag ${STAGING_IMAGE} ${STAGING_IMAGE_LTS} ; else docker tag ${PROD_IMAGE}; fi
        - if [ ${CI_COMMIT_REF_NAME} = "develop" ] || [ ${CI_COMMIT_REF_NAME} = "staging" ] ; then docker push ${STAGING_IMAGE} ; else docker push ${PROD_IMAGE} ; fi
        - if [ ${CI_COMMIT_REF_NAME} = "develop" ] || [ ${CI_COMMIT_REF_NAME} = "staging" ] ; then docker push ${STAGING_IMAGE_LTS} ; else docker push ${PROD_IMAGE_LTS} ; fi
    only:
        - master
        - develop
        - branch/edge
        - staging
        - k8s
#  except:
#    changes:
#      - ./**/*.md
#      - ./codestyle/**
#      - ./deoloy/**
#      - ./.gitignore

deploy-dev:
    tags:
        - wallet3-runner
    stage: deploy
    variables:
        SERVICE_NAME: uaa-wallet
    environment: sandbox
    script:
        - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" ${CI_REGISTRY}
        - export DOCKER_HOST=tcp://172.17.0.1:2376 DOCKER_TLS_VERIFY=1
        - mkdir -p ~/.docker
        - echo "$TLSCACERSTAG" > ~/.docker/ca.pem
        - echo "$TLSCERTSTAG" > ~/.docker/cert.pem
        - echo "$TLSKEYSTAG" > ~/.docker/key.pem
        - sed -i -e "s+%DOCKER_IMAGE%+${STAGING_IMAGE}+g" uaa-wallet-dev.yml
        - docker stack deploy --compose-file=uaa-wallet-dev.yml --with-registry-auth ${SERVICE_NAME}
    only:
        - develop
# deploy-prod-k8s:
#   tags:
#     - web
#   stage: deploy
#   variables:
#     MODULE_NAME: co-salon-admin-console
#   services:
#     - name: docker:dind
#   image: lwolf/helm-kubectl-docker:v1.11.8-v2.13.0
#   before_script:
#     - ls -la
#     - mkdir -p /etc/deploy
#     - echo "$kube_config" > ${KUBECONFIG}
#     - kubectl config use-context k8s.cosalon.vn
#     - helm init --client-only
#     - helm repo add stable https://kubernetes-charts.storage.googleapis.com/
#     - helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/
#     - helm repo update
#   script:
#     - cd helm-data/ && ls -la
#     - helm upgrade --install  --wait --set global.env=prod,image.repository=${CI_REGISTRY_IMAGE}/base-point/${MODULE_NAME},image.tag=${CI_PIPELINE_IID}-${CI_COMMIT_SHA} --namespace=${PROD_NAMESPACE} admin-console .
#   retry: 2
#   only:
#     - master
#     - k8s
